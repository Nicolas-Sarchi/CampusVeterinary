// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(VeterinaryDBContext))]
    [Migration("20231020032449_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("PetIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time(6)");

                    b.Property<int>("VetIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetIdFk");

                    b.HasIndex("VetIdFk");

                    b.ToTable("appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2023, 3, 12),
                            PetIdFk = 2,
                            Reason = "vacunacion",
                            Time = new TimeOnly(10, 30, 0),
                            VetIdFk = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2023, 10, 19),
                            PetIdFk = 1,
                            Reason = "vacunacion",
                            Time = new TimeOnly(13, 45, 0),
                            VetIdFk = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2023, 12, 21),
                            PetIdFk = 3,
                            Reason = "Baño",
                            Time = new TimeOnly(9, 15, 0),
                            VetIdFk = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SpeciesIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesIdFk");

                    b.ToTable("breed", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Golden Retriever",
                            SpeciesIdFk = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cocker Spaniel",
                            SpeciesIdFk = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Persian",
                            SpeciesIdFk = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("laboratory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Calle 23 # 23-34",
                            Name = "Genfar",
                            Phone = "31311"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Calle 23 # 23-34",
                            Name = "Bayer",
                            Phone = "3133453411"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MedicalTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("AdministrationDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MedicineIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentIdFk");

                    b.HasIndex("MedicineIdFk");

                    b.ToTable("medical_treatment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdministrationDate = new DateOnly(2023, 10, 12),
                            AppointmentIdFk = 1,
                            Dose = "12 mg",
                            MedicineIdFk = 1,
                            Observation = "Todo OK"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LaboratoryIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryIdFk");

                    b.ToTable("medicine", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LaboratoryIdFk = 1,
                            Name = "Amoxicilina",
                            Price = 12000m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 2,
                            LaboratoryIdFk = 1,
                            Name = "Gentamicina",
                            Price = 15000m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 3,
                            LaboratoryIdFk = 2,
                            Name = "Acetaminofen",
                            Price = 50500m,
                            Stock = 1003
                        });
                });

            modelBuilder.Entity("Domain.Entities.MedicinePurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("SupplierIdFk")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierIdFk");

                    b.ToTable("medicine_purchase", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2023, 12, 22),
                            SupplierIdFk = 1,
                            Total = 12000m
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2023, 10, 22),
                            SupplierIdFk = 2,
                            Total = 500000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.MedicineSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("OwnerIdFk")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerIdFk");

                    b.ToTable("medicine_sale", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2023, 12, 22),
                            OwnerIdFk = 1,
                            Total = 15000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("owner", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "nicolas@google.com",
                            Name = "Nicolas",
                            Phone = "12321"
                        },
                        new
                        {
                            Id = 2,
                            Email = "rob@google.com",
                            Name = "ROberto",
                            Phone = "666666"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("BreedIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OwnerIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedIdFk");

                    b.HasIndex("OwnerIdFk");

                    b.ToTable("pet", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateOnly(2016, 4, 20),
                            BreedIdFk = 2,
                            Name = "Oliver",
                            OwnerIdFk = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateOnly(2020, 3, 12),
                            BreedIdFk = 1,
                            Name = "Paco",
                            OwnerIdFk = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateOnly(2019, 9, 21),
                            BreedIdFk = 3,
                            Name = "Michi",
                            OwnerIdFk = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.PurchaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdMedicinePurchaseFk")
                        .HasColumnType("int");

                    b.Property<int>("MedicineIdFk")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdMedicinePurchaseFk");

                    b.HasIndex("MedicineIdFk");

                    b.ToTable("purchase_detail", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdMedicinePurchaseFk = 1,
                            MedicineIdFk = 1,
                            Quantity = 1,
                            Subtotal = 12000m
                        },
                        new
                        {
                            Id = 2,
                            IdMedicinePurchaseFk = 2,
                            MedicineIdFk = 3,
                            Quantity = 10,
                            Subtotal = 500000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdMedicineSaleFk")
                        .HasColumnType("int");

                    b.Property<int>("MedicineIdFk")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdMedicineSaleFk");

                    b.HasIndex("MedicineIdFk");

                    b.ToTable("sale_detail", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdMedicineSaleFk = 1,
                            MedicineIdFk = 2,
                            Quantity = 1,
                            Subtotal = 15000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Specialization", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cirujia Vascular"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cardiologia"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("species", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Canino"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Felino"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("supplier", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Calle 12 # 12 -43",
                            Name = "UNIONAGRO S A",
                            Phone = "12323"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Calle 12 # 12 -43",
                            Name = "Pet Pharma",
                            Phone = "12323"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("username");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserIdFk")
                        .HasColumnType("int");

                    b.Property<int>("RoleIdFk")
                        .HasColumnType("int");

                    b.HasKey("UserIdFk", "RoleIdFk");

                    b.HasIndex("RoleIdFk");

                    b.ToTable("user-role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Vet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SpecializationIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationIdFk");

                    b.ToTable("Veterinarian", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "adas@qw",
                            Name = "Juan",
                            Phone = "12332",
                            SpecializationIdFk = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "erfdc@qdfw",
                            Name = "Pedro",
                            Phone = "555555",
                            SpecializationIdFk = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vet", "Vet")
                        .WithMany("Appointments")
                        .HasForeignKey("VetIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Vet");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.HasOne("Domain.Entities.Species", "Species")
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Domain.Entities.MedicalTreatment", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany("MedicalTreatments")
                        .HasForeignKey("AppointmentIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicine", "Medicine")
                        .WithMany("MedicalTreatments")
                        .HasForeignKey("MedicineIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.HasOne("Domain.Entities.Laboratory", "Laboratory")
                        .WithMany("Medicines")
                        .HasForeignKey("LaboratoryIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Domain.Entities.MedicinePurchase", b =>
                {
                    b.HasOne("Domain.Entities.Supplier", "Supplier")
                        .WithMany("MedicinePurchases")
                        .HasForeignKey("SupplierIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Entities.MedicineSale", b =>
                {
                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("MedicineSales")
                        .HasForeignKey("OwnerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.HasOne("Domain.Entities.Breed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("Domain.Entities.MedicinePurchase", "MedicinePurchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("IdMedicinePurchaseFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicine", "Medicine")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("MedicineIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("MedicinePurchase");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SaleDetail", b =>
                {
                    b.HasOne("Domain.Entities.MedicineSale", "MedicineSale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("IdMedicineSaleFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicine", "Medicine")
                        .WithMany("SaleDetails")
                        .HasForeignKey("MedicineIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("MedicineSale");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Vet", b =>
                {
                    b.HasOne("Domain.Entities.Specialization", "Specialization")
                        .WithMany("Vets")
                        .HasForeignKey("SpecializationIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("MedicalTreatments");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Domain.Entities.Laboratory", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.Navigation("MedicalTreatments");

                    b.Navigation("PurchaseDetails");

                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("Domain.Entities.MedicinePurchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("Domain.Entities.MedicineSale", b =>
                {
                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("Domain.Entities.Owner", b =>
                {
                    b.Navigation("MedicineSales");

                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.Specialization", b =>
                {
                    b.Navigation("Vets");
                });

            modelBuilder.Entity("Domain.Entities.Species", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Navigation("MedicinePurchases");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.Vet", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
